<?xml version="1.0" encoding="utf-8"?>
<!--

    Licensed to Apereo under one or more contributor license
    agreements. See the NOTICE file distributed with this work
    for additional information regarding copyright ownership.
    Apereo licenses this file to you under the Apache License,
    Version 2.0 (the "License"); you may not use this file
    except in compliance with the License.  You may obtain a
    copy of the License at the following location:

      http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.

-->
<!--
 | Respondr is a theme based on the principals of Responsive Design
 | and Twitter Bootstrap technology.  It was developed by Gary Thompson (Unicon)
 | and integrated into uPortal 4.1 by Drew Wills (Unicon).
 -->

<!-- ========================================================================= -->
<!-- ========== README ======================================================= -->
<!-- ========================================================================= -->
<!--
 | The theme is written in XSL. For more information on XSL, refer to [http://www.w3.org/Style/XSL/].
 | Baseline XSL skill is strongly recommended before modifying this file.
 |
 | This file has two purposes:
 | 1. To instruct the portal how to compile and configure the Respondr theme for all device classes.
 | 2. To provide theme configuration and customization.
 |
 | As such, this file has a mixture of code that should not be modified, and code that exists explicitly to be modified.
 | To help make clear what is what, a RED-YELLOW-GREEN legend has been added to all of the sections of the file.
 |
 | RED: Stop! Do not modify.
 | YELLOW: Warning, proceed with caution.  Modifications can be made, but should not generally be necessary and may require more advanced skill.
 | GREEN: Go! Modify as desired.
 -->

<!-- ========================================================================= -->
<!-- ========== DOCUMENT DESCRIPTION ========================================= -->
<!-- ========================================================================= -->
<!--
 | Date: 07/30/2013
 | Author: Drew Wills
 | Company: Unicon,Inc.
 | uPortal Version: uP4.1.0
 |
 | General Description: This file, respondr.xsl, was developed with mcolumn.xsl in order
 | to enable uPortal 4.1 to be viewable by desktop, smartphone, and tablet devices.
 |
 | This file transforms the xml content generated by the mcolumn.xsl file into html, which
 | is then rendered in a mobile device. This file formats the html markup to render uPortal's tabs
 | and their associated channels and portlets for mobile display.
 -->

<!-- To allow &nbsp; in document. See http://www.onjava.com/pub/a/oreilly/java/news/javaxslt_0801.html -->
<!DOCTYPE xsl:stylesheet [
    <!ENTITY nbsp "&#160;">
    ]>
<!-- ========================================================================= -->
<!-- ========== STYLESHEET DELCARATION ======================================= -->
<!-- ========================================================================= -->
<!--
 | RED
 | This statement defines this document as XSL.
 -->
<xsl:stylesheet
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:dlm="http://www.uportal.org/layout/dlm"
    xmlns:upAuth="http://xml.apache.org/xalan/java/org.apereo.portal.security.xslt.XalanAuthorizationHelper"
    xmlns:upGroup="http://xml.apache.org/xalan/java/org.apereo.portal.security.xslt.XalanGroupMembershipHelper"
    xmlns:upMsg="http://xml.apache.org/xalan/java/org.apereo.portal.security.xslt.XalanMessageHelper"
    xmlns:upElemTitle="http://xml.apache.org/xalan/java/org.apereo.portal.security.xslt.XalanLayoutElementTitleHelper"
    xmlns:url="https://source.jasig.org/schemas/uportal/layout/portal-url"
    xsi:schemaLocation="
            https://source.jasig.org/schemas/uportal/layout/portal-url https://source.jasig.org/schemas/uportal/layout/portal-url-4.0.xsd"
    exclude-result-prefixes="url upAuth upGroup upMsg"
    version="1.0">

<!-- ========================================================================= -->


<!-- ========================================================================= -->
<!-- ========== IMPORTS ====================================================== -->
<!-- ========================================================================= -->
<!--
 | RED
 | Imports are the XSL files that build the theme.
 | Import statments and the XSL files they refer to should not be modified.
 -->
<xsl:import href="../resourcesTemplates.xsl" />  <!-- Templates for Skin Resource generation -->
<xsl:import href="../urlTemplates.xsl" />        <!-- Templates for URL generation -->
<xsl:import href="navigation.xsl" />
<xsl:import href="regions.xsl" />     <!-- Templates for areas (regions) on the page in which non-tab/column portlets may be placed -->
<xsl:import href="content.xsl" />     <!-- Templates for content elements (rows and portlets) -->
<!-- ========================================================================= -->


<!-- ========================================= -->
<!-- ========== OUTPUT DELCARATION =========== -->
<!-- ========================================= -->
<!--
 | RED
 | This statement instructs the XSL how to output.
 -->
<xsl:output method="xml" indent="yes" media-type="text/html" doctype-system="EMPTY"/>
<!-- ========================================= -->

<!-- ============================================== -->
<!-- ========== VARIABLES and PARAMETERS ========== -->
<!-- ============================================== -->
<!--
 | YELLOW - GREEN
 | These variables and parameters provide flexibility and customization of the user interface.
 | Changing the values of the variables and parameters signals the theme to reconfigure use
 | and location of user interface components. Most text used within the theme is localized.
 -->


<!-- ****** XSL UTILITY PARAMETERS ****** -->
<!--
| RED
| Parameters used by XSL->Java Callbacks
-->
<xsl:param name="CURRENT_REQUEST" />
<xsl:param name="RESOURCES_ELEMENTS_HELPER" />
<xsl:param name="XSLT_PORTAL_URL_PROVIDER" />


<!-- ****** SKIN SETTINGS ****** -->
<!--
| YELLOW
| Skin Settings can be used to change the location of skin files.
-->
<xsl:param name="userImpersonating">false</xsl:param>
<xsl:param name="skin">defaultSkin</xsl:param>
<xsl:param name="CONTEXT_PATH">/NOT_SET</xsl:param>
<xsl:param name="PORTAL_SHORTCUT_ICON" select="concat($CONTEXT_PATH,'/favicon.ico')" />
<xsl:param name="USE_TABS_SIZE">sm</xsl:param><!-- Default:  show tabs (instead of hamburger) on sm and larger screens -->
<xsl:variable name="SKIN" select="$skin"/>
<xsl:variable name="MEDIA_PATH">media/skins/respondr</xsl:variable>
<xsl:variable name="ABSOLUTE_MEDIA_PATH" select="concat($CONTEXT_PATH,'/',$MEDIA_PATH)"/>
<xsl:variable name="SKIN_RESOURCES_PATH" select="concat('/',$MEDIA_PATH,'/',$SKIN,'/skin.xml')"/>
<xsl:variable name="SKIN_PATH" select="concat($ABSOLUTE_MEDIA_PATH,'/',$SKIN)"/>
<xsl:variable name="FOCUSED_CLASS">
    <xsl:choose>
        <xsl:when test="//content/focused">focused <xsl:value-of select="//content/focused/channel/@fname"/></xsl:when>
        <xsl:otherwise>dashboard</xsl:otherwise>
    </xsl:choose>
</xsl:variable>
<!-- ======================================== -->


<!-- ****** LOCALIZATION SETTINGS ****** -->
<!--
 | GREEN
 | Localization Settings can be used to change the localization of the theme.
 -->
<xsl:param name="USER_LANG">en</xsl:param>
<!-- ======================================== -->


<!-- ****** PORTAL SETTINGS ****** -->
<!--
 | YELLOW
 | Portal Settings should generally not be (and not need to be) modified.
 -->
<xsl:param name="AUTHENTICATED" select="'false'"/>
<xsl:param name="PORTAL_PROTOCOL_AND_SERVER"></xsl:param>
<xsl:param name="HOST_NAME"></xsl:param>
<xsl:param name="USER_ID">guest</xsl:param>
<xsl:param name="userName">Guest User</xsl:param>
<xsl:param name="USER_NAME"><xsl:value-of select="$userName"/></xsl:param>
<xsl:param name="uP_productAndVersion">uPortal</xsl:param>
<xsl:param name="UP_VERSION"><xsl:value-of select="$uP_productAndVersion"/></xsl:param>
<xsl:param name="baseActionURL">render.uP</xsl:param>
<xsl:variable name="BASE_ACTION_URL"><xsl:value-of select="$baseActionURL"/></xsl:variable>
<xsl:variable name="IS_FRAGMENT_ADMIN_MODE">
  <xsl:choose>
    <!-- This is a strange thing to test;  is there no signal sent from the structure transform? -->
    <xsl:when test="//channel[@fname = 'fragment-admin-exit']">true</xsl:when>
    <xsl:otherwise>false</xsl:otherwise>
  </xsl:choose>
</xsl:variable>
<!-- In the case of DLM fragment owners, this CSS class will be applied to
     columns and portlets;  it tells the UI to permit the fragment owner to
     manage content, even when it it locked. -->
<xsl:variable name="FRAGMENT_OWNER_CSS">
  <xsl:choose>
    <xsl:when test="$IS_FRAGMENT_ADMIN_MODE='true'">up-fragment-admin</xsl:when>
    <xsl:otherwise></xsl:otherwise>
  </xsl:choose>
</xsl:variable>
<xsl:param name="USE_AJAX" select="'true'"/>
<xsl:param name="JS_LIBRARY_SKIN">
    <xsl:choose>
      <xsl:when test="$USE_AJAX='true'">jqueryui</xsl:when>
      <xsl:otherwise></xsl:otherwise>
    </xsl:choose>
</xsl:param>

<!-- ****** PORTLET SETTINGS ****** -->
<!--
 | GREEN
 | Portlet Settings can be used to change aspects of the portlet chrome.
 -->
<xsl:param name="USE_PORTLET_MINIMIZE_CONTENT" select="'true'" /> <!-- Sets the use of a content show/hide control.  Values are 'true' or 'false'. -->


<!-- ========================================================================= -->
<!-- ========== TEMPLATE: PAGE TITLE ========================================= -->
<!-- ========================================================================= -->
<!--
 | GREEN
 | This template renders the page title in the <head>.
 | Template contents can be any valid XSL or XHTML.
 -->
<xsl:template name="page.title">
    <title>
        <xsl:choose>
            <xsl:when test="//focused">
                {up-portlet-title(<xsl:value-of select="//focused/channel/@ID" />)} | <xsl:value-of select="upMsg:getMessage('portal.page.title', $USER_LANG)" />
            </xsl:when>
            <xsl:otherwise>
                <xsl:value-of select="/layout/navigation/tab[@activeTab='true']/@name"/> | <xsl:value-of select="upMsg:getMessage('portal.page.title', $USER_LANG)" />
            </xsl:otherwise>
       </xsl:choose>
   </title>
</xsl:template>
<!-- ========================================================================= -->


<!-- ========================================================================= -->
<!-- ========== TEMPLATE: PAGE META ========================================== -->
<!-- ========================================================================= -->
<!--
 | GREEN
 | This template renders keywords and descriptions in the <head>.
 | Template contents can be any valid XSL or XHTML.
 -->
<xsl:template name="page.meta">
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
    <meta name="apple-mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-status-bar-style" content="black" />
    <meta name="description" content="{upMsg:getMessage('portal.page.meta.description', $USER_LANG)}" />
    <meta name="keywords" content="{upMsg:getMessage('portal.page.meta.keywords', $USER_LANG)}" />
</xsl:template>
<!-- ========================================================================= -->

<!-- ========================================================================= -->
<!-- ========== TEMPLATE: PAGE JAVASCRIPT ==================================== -->
<!-- ========================================================================= -->
<!--
 | YELLOW
 | This template initializes portal-wide JavaScript and cleans up the global namespace.
 -->
<xsl:template name="page.js">
  <script type="text/javascript">
    var up = up || {};
    up.jQuery = jQuery.noConflict(true);
    up.fluid = fluid;
    fluid = null;
    fluid_1_5 = null;
    up._ = _.noConflict();
    up._.templateSettings = {
      interpolate : /{{=(.+?)}}/g,
      evaluate    : /{{(.+?)}}/g,
      escape: /{{-([\s\S]+?)}}/g
    };
    up.Backbone = Backbone.noConflict();

    // fix console.log in IE8,9.  Though we don't commit to supporting these IE versions, this minor fix allows
    // these browsers to work better.
    if (!window.console) window.console = {};
    if (!window.console.log) window.console.log = function() {};
    if (!window.console.trace) window.console.trace = function() {};

    (function($) {
      $(function() {
        var navMenuToggle = function() {
          var menu = $(".portal-nav .menu"), menuToggle = $("#up-sticky-nav .menu-toggle");
          // Toggle the nav visibility when the button is clicked.
          menuToggle.click(function() {
            // Open and animate the offcanvas
            $('.row-offcanvas').toggleClass('active');
            // show the nav
            // menu.toggleClass("show");
            // scroll top
            $('html, body').animate({
                scrollTop: 0
            });
            // animate the hamburger to an arrow
            $('.hamburger').toggleClass("is-active");
            return false;
          });
        }

        navMenuToggle();
      });

      $(document).ready(function() {
          if (up.lightboxConfig) {
            up.lightboxConfig.init();
          }

          // Unhide the portlet's options menu if there are option items to display.
          $('div.portlet-options-menu').has('li').removeClass('hidden');

          // If portlet chrome is configured to not show (shows on hover) and the portlet is not movable, the portlet chrome
          // is hidden.  However if there are option items to display, allow the portlet chrome to show on hover.
          $('div.hover-toolbar').filter('.hidden').has('li').removeClass('hidden');

          // Attach behavior to the Move Portlet options menu
          $('.portlet-options-menu .up-portlet-control.move').click(function() {
             // If Move Portlet, unhide the grab handle and change the menu text
             if ($(this).text() === $(this).attr('data-move-text')) {
                $(this).parents('.up-portlet-titlebar').find('.grab-handle').removeClass('hidden');
                $(this).text($(this).attr('data-cancel-move-text'));
             } else {
                // Else cancel the move by hiding the grab handle and reverting the text
                $(this).parents('.up-portlet-titlebar').find('.grab-handle').addClass('hidden');
                $(this).text($(this).attr('data-move-text'));
             }
          })
      });

    })(up.jQuery);
  </script>
</xsl:template>
<!-- ========================================================================= -->

<!-- ========================================================================= -->
<!-- ========== TEMPLATE: PAGE DIALOGS ==================================== -->
<!-- ========================================================================= -->
<!--
 | YELLOW
 | This template renders dialog windows used by certain behaviors in the portal.
 -->
<xsl:template name="page.dialogs">

    <xsl:variable name="permissionChannelId">PORTLET_ID.<xsl:value-of select="//focused/channel/@chanID"/></xsl:variable>
    <xsl:choose>
        <!-- The normal/usual case:  Dashboard (non-focused) mode -->
        <xsl:when test="not(//focused)">
            <xsl:call-template name="page.dialogs.dashboard" />
        </xsl:when>
        <!-- UseIt/ Add to My Layout use case:  We are focused on a portlet that is (1) not currently
             in the user's layout and (2) not a "hidden" portlet (user has BROWSE
             permission to portlet). -->
        <xsl:when test="//focused[@in-user-layout='no'] and $AUTHENTICATED='true' and upAuth:hasPermission('UP_PORTLET_SUBSCRIBE', 'BROWSE', $permissionChannelId)">
            <xsl:call-template name="page.dialogs.useit" />
        </xsl:when>
        <xsl:otherwise>
            <!-- Currently no up.LayoutPreferences JS to initialize when (1) user is focused (2) on a portlet already in his layout. -->
        </xsl:otherwise>
    </xsl:choose>

</xsl:template>
<!-- ========================================================================= -->


<!-- ================================================================================ -->
<!-- ========== TEMPLATE: PAGE DIALOGS DASHBOARD ==================================== -->
<!-- ================================================================================ -->
<!--
 | YELLOW
 | This template renders dialog windows for "dashboard" (non-focused) mode in the portal.
 -->
<xsl:template name="page.dialogs.dashboard">

    <xsl:if test="$IS_FRAGMENT_ADMIN_MODE='true'">
        <div class="edit-page-permissions-dialog" title="{upMsg:getMessage('edit.page.permissions', $USER_LANG)}">
            <div class="fl-widget portlet">
                <div class="fl-widget-titlebar titlebar portlet-titlebar" role="sectionhead">
                    <h2 class="title" role="heading"><xsl:value-of select="/layout/navigation/tab[@activeTab='true']/@name"/></h2>
                </div>
                <div class="fl-widget-content content portlet-content">
                    <div class="portlet-section" role="region">
                        <div class="titlebar">
                            <h3 class="title" role="heading"><xsl:value-of select="upMsg:getMessage('allow.users.to', $USER_LANG)"/>:</h3>
                        </div>
                        <div class="content">
                            <form>
                                <p>
                                    <input type="hidden" name="nodeId" value="{/layout/navigation/tab[@activeTab='true']/@ID}"/>
                                    <input type="checkbox" name="movable"/> <xsl:value-of select="upMsg:getMessage('move.this.tab', $USER_LANG)"/><br />
                                    <input type="checkbox" name="editable"/> <xsl:value-of select="upMsg:getMessage('edit.page.properties', $USER_LANG)"/><br />
                                    <input type="checkbox" name="addChildAllowed"/> <xsl:value-of select="upMsg:getMessage('add.columns', $USER_LANG)"/><br />
                                    <input type="checkbox" name="deletable"/> <xsl:value-of select="upMsg:getMessage('remove.this.tab', $USER_LANG)"/><br />
                                </p>
                                <div class="buttons">
                                    <input type="submit" class="button primary portlet-form-button" value="{upMsg:getMessage('update.permissions', $USER_LANG)}"/>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="edit-column-permissions-dialog" title="{upMsg:getMessage('edit.column.permissions', $USER_LANG)}">
            <div class="fl-widget portlet">
                <div class="fl-widget-titlebar titlebar portlet-titlebar" role="sectionhead">
                    <h2 class="title" role="heading"></h2>
                </div>
                <div class="fl-widget-content content portlet-content">
                    <form>
                        <p><xsl:value-of select="upMsg:getMessage('allow.users.to', $USER_LANG)"/>:</p>
                        <p>
                            <input type="hidden" name="nodeId" value=""/>
                            <input type="checkbox" name="movable"/> <xsl:value-of select="upMsg:getMessage('move.this.column', $USER_LANG)"/><br />
                            <input type="checkbox" name="editable"/> <xsl:value-of select="upMsg:getMessage('edit.column.properties', $USER_LANG)"/><br />
                            <input type="checkbox" name="addChildAllowed"/> <xsl:value-of select="upMsg:getMessage('add.portlets.to.this.column', $USER_LANG)"/><br />
                            <input type="checkbox" name="deletable"/> <xsl:value-of select="upMsg:getMessage('delete.this.column', $USER_LANG)"/><br />
                        </p>
                        <div class="buttons">
                            <input type="submit" class="button primary portlet-form-button" value="{upMsg:getMessage('update.permissions', $USER_LANG)}"/>
                        </div>
                    </form>
                </div>
            </div>
        </div>
        <div class="edit-portlet-permissions-dialog" title="{upMsg:getMessage('edit.portlet.permissions', $USER_LANG)}">
            <div class="fl-widget portlet">
                <div class="fl-widget-titlebar titlebar portlet-titlebar" role="sectionhead">
                    <h2 class="title" role="heading"></h2>
                </div>
                <div class="fl-widget-content content portlet-content">
                    <div class="portlet-section" role="region">
                        <div class="titlebar">
                            <h3 class="title" role="heading"><xsl:value-of select="upMsg:getMessage('allow.users.to', $USER_LANG)"/>:</h3>
                        </div>
                        <div class="content">
                            <form>
                                <p>
                                    <input type="hidden" name="nodeId"/>
                                    <input type="checkbox" name="movable"/> <xsl:value-of select="upMsg:getMessage('move.this.portlet', $USER_LANG)"/><br />
                                    <input type="checkbox" name="deletable"/> <xsl:value-of select="upMsg:getMessage('remove.this.portlet', $USER_LANG)"/><br />
                                </p>
                                <div class="buttons">
                                    <input type="submit" class="button primary portlet-form-button" value="{upMsg:getMessage('update.permissions', $USER_LANG)}"/>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </xsl:if><!-- End fragment admin dialogs -->

    <div id="portalDropWarning" class="drop-warning" style="display:none;">
        <p><xsl:value-of select="upMsg:getMessage('portlet.cannot.be.moved.here.locked', $USER_LANG)"/></p>
    </div>

    <script type="text/javascript">

        up.jQuery(document).ready(function() {

            if(window.location.search.indexOf('redirectToDefault=true') > 0) {
              up.jQuery('#up-notification').noty({text: '<xsl:value-of select="upMsg:getMessageForEmacsScript('error.redirectinfo', $USER_LANG)"/>', type: 'information'});
            }

            <xsl:if test="$IS_FRAGMENT_ADMIN_MODE='true'">
            up.FragmentPermissionsManager("body", {
                savePermissionsUrl: '<xsl:value-of select="$CONTEXT_PATH"/>/api/layout',
                messages: {
                    columnX: '<xsl:value-of select="upMsg:getMessageForEmacsScript('column.x', $USER_LANG)"/>',
                }
            });
            </xsl:if>
            <xsl:if test="$AUTHENTICATED='true'">
            var options = {
                tabContext: '<xsl:value-of select="$TAB_CONTEXT"/>',
                numberOfPortlets: '<xsl:value-of select="count(content/column/channel)"/>',
                portalContext: '<xsl:value-of select="$CONTEXT_PATH"/>',
                mediaPath: '<xsl:value-of select="$ABSOLUTE_MEDIA_PATH"/>',
                currentSkin: '<xsl:value-of select="$SKIN"/>',
                subscriptionsSupported: '<xsl:value-of select="$subscriptionsSupported"/>',
                layoutPersistenceUrl: '<xsl:value-of select="$CONTEXT_PATH"/>/api/layout',
                channelRegistryUrl: '<xsl:value-of select="$CONTEXT_PATH"/>/api/portletList',
                subscribableTabUrl: '<xsl:value-of select="$CONTEXT_PATH"/>/api/subscribableTabs.json',
                columnWidthClassPattern: 'col-md-',
                columnWidthClassFunction: function(column) {
                    if (column > 100) {
                        // Flex columns -- no columnWidthClass on the main column div
                        return false;
                    } else {
                        // uPortal classic columns
                        return 'col-md-' + Math.round(column / 8.3333);
                    }
                },
                innerColumnClassesFunction: function(column) {
                    if (column > 100) {
                        // Flex columns -- logic mirrors how they're drawn server-side
                        var result = 'up-grid up-matching-height up-constant-columns ';
                        switch(column) {
                            case 106:
                                result += 'up-col-xs-2 up-col-sm-3 up-col-md-4 up-col-lg-6';
                                break;
                            case 104:
                                result += 'up-col-xs-1 up-col-sm-2 up-col-md-3 up-col-lg-4';
                                break;
                            case 103:
                                result += 'up-col-xs-1 up-col-sm-1 up-col-md-2 up-col-lg-3';
                                break;
                            default:
                                // The only other officially supported value is 102, but
                                // any other value over 100 will be treated as 102.
                                result += 'up-col-xs-1 up-col-sm-1 up-col-md-2 up-col-lg-2';
                                break;
                        }
                        return result;
                    } else {
                        // uPortal classic columns -- no innerColumnClasses used
                        return false;
                    }
                },
                messages: {
                    confirmRemoveTab: '<xsl:value-of select="upMsg:getMessageForEmacsScript('are.you.sure.remove.tab', $USER_LANG)"/>',
                    confirmRemovePortlet: '<xsl:value-of select="upMsg:getMessageForEmacsScript('are.you.sure.remove.portlet', $USER_LANG)"/>',
                    movePortletError: '<xsl:value-of select="upMsg:getMessageForEmacsScript('move.this.portlet.error', $USER_LANG)"/>',
                    addTabLabel: '<xsl:value-of select="upMsg:getMessageForEmacsScript('my.tab', $USER_LANG)"/>',
                    column: '<xsl:value-of select="upMsg:getMessageForEmacsScript('column', $USER_LANG)"/>',
                    columns: '<xsl:value-of select="upMsg:getMessageForEmacsScript('columns', $USER_LANG)"/>',
                    fullWidth: '<xsl:value-of select="upMsg:getMessageForEmacsScript('full.width', $USER_LANG)"/>',
                    narrowWide: '<xsl:value-of select="upMsg:getMessageForEmacsScript('narrow.wide', $USER_LANG)"/>',
                    even: '<xsl:value-of select="upMsg:getMessageForEmacsScript('even', $USER_LANG)"/>',
                    wideNarrow: '<xsl:value-of select="upMsg:getMessageForEmacsScript('wide.narrow', $USER_LANG)"/>',
                    narrowWideNarrow: '<xsl:value-of select="upMsg:getMessageForEmacsScript('narrow.wide.narrow', $USER_LANG)"/>',
                    flexTwo: '<xsl:value-of select="upMsg:getMessageForEmacsScript('flex.two', $USER_LANG)"/>',
                    flexThree: '<xsl:value-of select="upMsg:getMessageForEmacsScript('flex.three', $USER_LANG)"/>',
                    flexFour: '<xsl:value-of select="upMsg:getMessageForEmacsScript('flex.four', $USER_LANG)"/>',
                    flexSix: '<xsl:value-of select="upMsg:getMessageForEmacsScript('flex.six', $USER_LANG)"/>',
                    searchForStuff: '<xsl:value-of select="upMsg:getMessageForEmacsScript('search.for.stuff', $USER_LANG)"/>',
                    allCategories: '<xsl:value-of select="upMsg:getMessageForEmacsScript('all(categories)', $USER_LANG)"/>',
                    persistenceError: '<xsl:value-of select="upMsg:getMessageForEmacsScript('error.persisting.layout.change', $USER_LANG)"/>'
                }
            };
            var layoutPreferences = up.LayoutPreferences("body", options);
            // For the portlet/Respondr version of the gallery control,
            // we must open it ourselves (if present) when the page loads.
            if (layoutPreferences.components.gallery) {
                layoutPreferences.components.gallery.openGallery();
            }
            </xsl:if>
        });
    </script>

</xsl:template>
<!-- ========================================================================= -->


<!-- ================================================================================ -->
<!-- ========== TEMPLATE: PAGE DIALOGS FOCUSED   ==================================== -->
<!-- ================================================================================ -->
<!--
 | YELLOW
 | This template renders dialog windows for focused mode on a portlet user has BROWSE to.
 -->
<xsl:template name="page.dialogs.useit">

    <div id="ajaxMenus" style="display:none;">
        <!-- Add Portlet Menu -->
        <div class="focused-content-dialog" title="{upMsg:getMessage('add.content', $USER_LANG)}">
            <form>
                <fieldset>
                    <legend>
                        <xsl:value-of select="upMsg:getMessage('add.to.page', $USER_LANG)" />:
                    </legend>
                    <xsl:variable name="unlockedTab" select="/layout/navigation/tab[@dlm:hasColumnAddChildAllowed='true']" />
                    <xsl:choose>
                      <xsl:when test="$unlockedTab">
                        <xsl:for-each select="/layout/navigation/tab[@dlm:hasColumnAddChildAllowed='true']">
                            <input name="targetTab" id="targetTab{@ID}" value="{@ID}" type="radio" />
                            <label for="targetTab{@ID}" class="portlet-form-field-label">
                                <xsl:value-of select="@name" />
                            </label>
                            <br />
                        </xsl:for-each>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="upMsg:getMessage('error.add.portlet.in.layout', $USER_LANG)" />
                      </xsl:otherwise>
                    </xsl:choose>
                </fieldset>
                <p>
                    <input name="portletId" type="hidden" value="{//focused/channel/@chanID}" />
                    <input type="submit" value="{upMsg:getMessage('add', $USER_LANG)}" class="portlet-form-button" />
                    &#160;
                </p>
            </form>
        </div>
    </div>
    <script type="text/javascript">
        up.jQuery(document).ready(function() {
            up.FocusedLayoutPreferences("body", {
                portalContext: '<xsl:value-of select="$CONTEXT_PATH"/>',
                layoutPersistenceUrl: '<xsl:value-of select="$CONTEXT_PATH"/>/api/layout',
                messages: {
                    persistenceError: '<xsl:value-of select="upMsg:getMessageForEmacsScript('error.persisting.layout.change', $USER_LANG)"/>'
                }
            });
        });
    </script>

</xsl:template>
<!-- ========================================================================= -->


<!-- ==================================================================================== -->
<!-- ========== TEMPLATE: DOCUMENT NORMAL =============================================== -->
<!-- ==================================================================================== -->
<!--
 | RED
 | This approach to rendering is the standard portal experience.  This template
 | defines the overall structure of the html markup.  Focused and Non-focused
 | content is controlled through an xsl:choose statement.  Template contents can
 | be any valid XSL or XHTML.
 -->
<xsl:template name="document.normal">
    <html lang="{$USER_LANG}" class="respondr">
        <head>
            <chunk-point/> <!-- Performance Optimization, see ChunkPointPlaceholderEventSource -->
            <xsl:call-template name="page.title" />
            <xsl:call-template name="page.meta" />
            <xsl:call-template name="skinResources">
                <xsl:with-param name="path" select="$SKIN_RESOURCES_PATH" />
            </xsl:call-template>
            <xsl:if test="$PORTAL_SHORTCUT_ICON != ''">
                <link rel="shortcut icon" href="{$PORTAL_SHORTCUT_ICON}" type="image/x-icon" />
            </xsl:if>
            <xsl:call-template name="page.js" />
            <chunk-point/> <!-- Performance Optimization, see ChunkPointPlaceholderEventSource -->
            <!-- Include the RENDER_HEADERS output of all channel-headers in header section -->
            <xsl:for-each select="//header/descendant::channel-header">
                <xsl:copy-of select="."/>
            </xsl:for-each>
            <chunk-point/> <!-- Performance Optimization, see ChunkPointPlaceholderEventSource -->
        </head>
        <body>
          <xsl:attribute name="class">
            <xsl:text>up dashboard portal fl-theme-mist</xsl:text>
            <xsl:if test="$PORTAL_VIEW = 'focused'"> up-focused</xsl:if>
            <xsl:if test="$AUTHENTICATED != 'true'"> up-guest</xsl:if>
          </xsl:attribute>
          <xsl:call-template name="skipnav" />
          <!-- Apply the 'row-offcanvas' class, and also a second class that indicates when to switch to the tabs (from the hamburger menu), if ever -->
          <div class="row-offcanvas up-use-tabs-{$USE_TABS_SIZE}">
            <div id="up-notification"></div>
            <div id="wrapper">
                <xsl:call-template name="region.hidden-top" />
                <xsl:call-template name="region.page-top" />
                <header class="portal-header" role="banner">
                    <div id="up-sticky-nav" class="container-fluid">
                        <div class="portal-global row">
                            <a href="javascript:void(0);" tabindex="0" class="menu-toggle pull-left" aria-label="{upMsg:getMessage('menu', $USER_LANG)}" role="button" title="{upMsg:getMessage('menu', $USER_LANG)}" data-toggle="offcanvas" aria-expanded="false" aria-haspopup="true" aria-controls="sidebar">
                                <div class="hamburger hamburger-arrow">
                                   <div class="hamburger-box">
                                     <div class="hamburger-inner"></div>
                                   </div>
                                </div>
                            </a>
                            <xsl:call-template name="region.eyebrow" />
                        </div>
                    </div>
                    <xsl:call-template name="region.header-top" />
                    <div class="container-fluid portal-header-main">
                        <chunk-point/> <!-- Performance Optimization, see ChunkPointPlaceholderEventSource -->
                        <div class="row">
                            <xsl:call-template name="region.header-left" />
                            <xsl:call-template name="region.header-right" />
                        </div>
                    </div>
                    <xsl:call-template name="region.header-bottom" />
                    <xsl:apply-templates select="layout/navigation" />
                </header>
                <chunk-point/> <!-- Performance Optimization, see ChunkPointPlaceholderEventSource -->
                <div id="portalPageBody" class="portal-content" role="main"><!-- #portalPageBody selector is used with BackgroundPreference framework portlet -->
                    <xsl:call-template name="region.customize" />
                    <xsl:call-template name="region.mezzanine" />
                    <chunk-point/> <!-- Performance Optimization, see ChunkPointPlaceholderEventSource -->
                    <div class="container-fluid">
                        <div class="row"><!-- Fixed-grid row containing content (pre-, regular, and post-), plus optionally sidebar-left, sidebar-right, or both -->
                            <xsl:call-template name="region.sidebar-left" />
                            <!-- The following div must know how many columns are taken by sidebar-left and sidebar-right, if any -->
                            <xsl:variable name="SIDEBAR_LEFT_COLUMNS">
                                <xsl:choose>
                                    <xsl:when test="//region[@name='sidebar-left']/channel">2</xsl:when>
                                    <xsl:otherwise>0</xsl:otherwise>
                                </xsl:choose>
                            </xsl:variable>
                            <xsl:variable name="SIDEBAR_RIGHT_COLUMNS">
                                <xsl:choose>
                                    <xsl:when test="//region[@name='sidebar-right']/channel">2</xsl:when>
                                    <xsl:otherwise>0</xsl:otherwise>
                                </xsl:choose>
                            </xsl:variable>
                            <xsl:variable name="WIDTH_CSS_CLASS">col-md-<xsl:value-of select="12 - $SIDEBAR_LEFT_COLUMNS - $SIDEBAR_RIGHT_COLUMNS" /></xsl:variable>
                            <div class="{$WIDTH_CSS_CLASS}">
                                <!-- USE FLUID ROWS WITHIN HERE -->
                                <xsl:call-template name="focused-fragment-header" />
                                <xsl:call-template name="region.pre-content" />
                                <!-- For editing page permissions in fragment-admin mode  -->
                                <xsl:if test="$IS_FRAGMENT_ADMIN_MODE='true'">
                                    <div class="row">
                                        <div class="col-md-9"></div>
                                        <div class="col-md-3">
                                            <div id="portalEditPagePermissions" class="fl-fix">
                                                <a class="button" id="editPagePermissionsLink" href="#" title="{upMsg:getMessage('edit.page.permissions', $USER_LANG)}">
                                                    <i class="fa fa-align-justify"></i>
                                                    <xsl:value-of select="upMsg:getMessage('edit.page.permissions', $USER_LANG)"/>
                                                </a>
                                            </div>
                                        </div>
                                    </div>
                                </xsl:if>
                                <!-- Works with up-layout-preferences.js showMessage()  -->
                                <div class="row">
                                    <div id="portalPageBodyMessage" class="col-md-12"></div>
                                </div>

                                <chunk-point/> <!-- Performance Optimization, see ChunkPointPlaceholderEventSource -->
                                <xsl:choose>
                                    <xsl:when test="$PORTAL_VIEW='focused'">
                                        <!-- === FOCUSED VIEW === -->
                                        <xsl:apply-templates select="//focused"/> <!-- Templates located in content.xsl. -->
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:apply-templates select="layout/content" />
                                    </xsl:otherwise>
                                </xsl:choose>
                                <chunk-point/> <!-- Performance Optimization, see ChunkPointPlaceholderEventSource -->

                                <!--add post content here-->
                                <xsl:call-template name="region.post-content" />
                                <!-- /USE FLUID ROWS -->
                            </div>
                            <xsl:call-template name="region.sidebar-right" />
                        </div><!-- /Fixed-grid row, inclusive of sidebar-left and sidebar-right -->
                    </div>
                </div>
                <chunk-point/> <!-- Performance Optimization, see ChunkPointPlaceholderEventSource -->
                <xsl:call-template name="region.footer.first" />
                <xsl:call-template name="region.footer.second" />
                <xsl:call-template name="region.page-bottom" />
                <xsl:call-template name="region.hidden-bottom" />
                <chunk-point/> <!-- Performance Optimization, see ChunkPointPlaceholderEventSource -->
            </div>

            <xsl:call-template name="page.dialogs" />

            <script type="text/javascript">
                up.analytics = up.analytics || {};
                up.analytics.host = '<xsl:value-of select="$HOST_NAME" />';
                up.analytics.portletData = <portlet-analytics-data/>;
                up.analytics.pageData = <page-analytics-data/>;
            </script>
          </div>
        </body>
    </html>
</xsl:template>

<!-- ====================================================================================== -->
<!-- ========== TEMPLATE: DOCUMENT DETACHED =============================================== -->
<!-- ====================================================================================== -->
<!--
 | RED
 | This template displays one portlet at a time in detached window state.
 -->
<xsl:template name="document.detached">
  <html lang="{$USER_LANG}" class="respondr">
    <head>
        <xsl:call-template name="page.title" />
        <xsl:call-template name="page.meta" />
        <xsl:call-template name="skinResources">
            <xsl:with-param name="path" select="$SKIN_RESOURCES_PATH" />
        </xsl:call-template>
        <xsl:if test="$PORTAL_SHORTCUT_ICON != ''">
            <link rel="shortcut icon" href="{$PORTAL_SHORTCUT_ICON}" type="image/x-icon" />
        </xsl:if>
        <xsl:call-template name="page.js" />
        <chunk-point/> <!-- Performance Optimization, see ChunkPointPlaceholderEventSource -->
        <!-- Include the RENDER_HEADERS output of all channel-headers in header section -->
        <xsl:for-each select="//header/descendant::channel-header">
            <xsl:copy-of select="."/>
        </xsl:for-each>
    </head>
    <body>
        <xsl:attribute name="class">
            <xsl:text>up dashboard portal fl-theme-mist detachedHeader</xsl:text>
            <xsl:if test="$AUTHENTICATED!='true'"> up-guest</xsl:if>
        </xsl:attribute>
        <xsl:call-template name="skipnav" />
        <div id="wrapper">
            <xsl:call-template name="region.hidden-top" />
            <xsl:call-template name="region.page-top" />
            <div class="portal-sticky-header" id="portal-sticky-header">
                <header class="portal-header" role="banner">
                    <div class="portal-global">
                        <div class="navbar navbar-fixed-top" role="navigation">
                            <div class="container-fluid">
                                <div class="portal-user">
                                    <div class="navbar-header">
                                        <a href="javascript:window.location = document.referrer || '{$CONTEXT_PATH}';" title="{upMsg:getMessage('return.to.dashboard.view', $USER_LANG)}" class="up-portlet-control hide-content pull-left fa fa-home portal-return-to-dashboard"></a>
                                    </div>
                                    <div class="navbar-collapse collapse">
                                        <xsl:choose>
                                            <xsl:when test="$userImpersonating = 'true'">
                                                <xsl:value-of select="upMsg:getMessage('you.are.idswapped.as', $USER_LANG)"/>
                                            </xsl:when>
                                            <xsl:otherwise>
                                                <xsl:value-of select="upMsg:getMessage('you.are.signed.in.as', $USER_LANG)"/>
                                            </xsl:otherwise>
                                        </xsl:choose>&nbsp;
                                        <span class="user-name">
                                            <xsl:value-of select="$USER_NAME"/>
                                        </span>
                                        <xsl:if test="$AUTHENTICATED='true'">
                                            -
                                            <a href="{$CONTEXT_PATH}/Logout" title="{upMsg:getMessage('log.off.and.exit', $USER_LANG)}" class="up-portlet-control hide-content portal-logout">
                                                <xsl:value-of select="upMsg:getMessage('sign.out', $USER_LANG)"/>
                                            </a>
                                        </xsl:if>
                                    </div>
                                </div>
                            </div>
                        </div> <!-- end navbar -->
                    </div>
                </header>
            </div>
            <div class="portal-sticky-content">
                <div class="portal-sticky-container container-fluid">
                    <div class="row">
                        <div id="portalPageBodyMessage" class="col-md-12"></div>
                    </div>
                </div>
                <chunk-point/> <!-- Performance Optimization, see ChunkPointPlaceholderEventSource -->
                <xsl:copy-of select="/layout_fragment/content"/>
                <chunk-point/> <!-- Performance Optimization, see ChunkPointPlaceholderEventSource -->
            </div>
            <xsl:call-template name="region.page-bottom" />
            <xsl:call-template name="region.hidden-bottom" />
        </div>
        <script type="text/javascript">
        up.analytics = up.analytics || {};
        up.analytics.host = '<xsl:value-of select="$HOST_NAME" />';
        up.analytics.portletData = <portlet-analytics-data/>;
        up.analytics.pageData = <page-analytics-data/>;
        </script>
    </body>
  </html>
</xsl:template>

<!-- ========================================================================= -->
<!-- ========== TEMPLATE: ROOT =============================================== -->
<!-- ========================================================================= -->
<!--
 | RED
 | This is the root xsl template.  It chooses the basic nature of how the portal
 | will be displayed.  The options at this point are normal (dashboard or
 | focused), or DETACHED.
 -->
<xsl:template match="/">
    <xsl:choose>
        <xsl:when test="$PORTAL_VIEW = 'detached'">
            <xsl:call-template name="document.detached"/>
        </xsl:when>
        <xsl:otherwise>
            <xsl:call-template name="document.normal"/>
        </xsl:otherwise>
    </xsl:choose>
</xsl:template>

</xsl:stylesheet>
