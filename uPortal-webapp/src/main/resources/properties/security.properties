#
# Licensed to Apereo under one or more contributor license
# agreements. See the NOTICE file distributed with this work
# for additional information regarding copyright ownership.
# Apereo licenses this file to you under the Apache License,
# Version 2.0 (the "License"); you may not use this file
# except in compliance with the License.  You may obtain a
# copy of the License at the following location:
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

##
##  CAS & Local Authentication
##
##  The following is an example of configuring uPortal to use both CAS
##  and local user authentication (authentication by username and password
##  hash stored in the uPortal database).  It uses the UnionSecurityContext
##  to consider both these authentication methods and declares the required
##  tokens for all.  This approach requires the corresponding filter mappings
##  in web.xml (mapping both the CASValidateFilter and the StaticCasReceiptCacher
##  filter in front of the LoginServlet).
##
##  The bundled cas instance (http://localhost:8080/cas) also uses the user in
##  the uPortal database for authentication.
##

portal.protocol=http
portal.server=localhost:8080
portal.context=/uPortal
portal.protocol.server.context=${portal.protocol}://_CURRENT_SERVER_NAME_${portal.context}
portal.login.url=${portal.protocol.server.context}/Login

# Needed for proxy-cas in load-balanced system like Apache to return the
# proxy-ticket to the requesting server. It requires that the load-balanced
# instance has his serverName
# Example: my.univ.edu
portal.lbServerName=${portal.server}

# All server names values for multi server name management, separator is a space
# This property should be set/overridden in PORTAL_HOME/uPortal.properties
# Example: portal1.univ.edu portal2.univ.edu
portal.allServerNames=${portal.server}

##
## Authentication Strategies Available in the Portal.
##

## CAS
#
cas.protocol=http
cas.server=localhost:8080
cas.context=/cas
cas.protocol.server.context=${cas.protocol}://${cas.server}${cas.context}

cas.ticketValidationFilter.service=${portal.login.url}
cas.ticketValidationFilter.ticketValidator.server=${cas.protocol.server.context}
org.apereo.portal.security.provider.cas.CasAssertionSecurityContextFactory.enabled=false
org.apereo.portal.security.provider.cas.CasAssertionSecurityContextFactory.credentialToken=ticket

cas.enable.redirect.guest.to.login=false
cas.authenticationFilter.service=${portal.login.url}
cas.authenticationFilter.cas.login.url=${cas.protocol.server.context}/login

## If the following 2 properties are defined (either with the values shown or other valid values),
## CAS authentication will also request a Proxy-Granting Ticket (PGT).  This feature requires
## special permission in the CAS Service Manager.
#
#cas.ticketValidationFilter.proxyReceptorUrl=/CasProxyServlet
#cas.ticketValidationFilter.ticketValidator.proxyCallbackUrl=${portal.protocol}://${portal.lbServerName}${portal.context}${cas.ticketValidationFilter.proxyReceptorUrl}

## Some CAS servers, like the CAS server in uPortal-start can not handle encoded service URLs.
## Set the following property to false to disable encoding of service URLs.
## See https://groups.google.com/a/apereo.org/d/msg/uportal-user/44Uw1YP8_Mg/hLaTlEVZFAAJ
## for the discussion regarding this property
#
#cas.ticketValidationFilter.encodeServiceUrl=true

## Simple (database)
#
org.apereo.portal.security.provider.SimpleSecurityContextFactory.enabled=false
org.apereo.portal.security.provider.SimpleSecurityContextFactory.principalToken=userName
org.apereo.portal.security.provider.SimpleSecurityContextFactory.credentialToken=password

## Answers where the user will be redirected when log out occurs.
## It would be better to escape the value of the url parameter, but since there are no parameters on the
## unescaped URL and since there are no further parameters on the logout URL, this does work.
#
logout.redirect=${cas.protocol.server.context}/logout?url=${portal.login.url}

## Login URL, if specified the CLogin channel will display a Login link with
## this URL instead of the standard userName/password form.
#
org.apereo.portal.channels.CLogin.CasLoginUrl=${cas.protocol.server.context}/login?service=${portal.login.url}

## URL of the CAS clearPass password service.  Note that value must also be listed in the CAS Service Registry as an
## allowed URL to access the password.
#
#org.apereo.portal.security.provider.cas.clearpass.PasswordCachingCasAssertionSecurityContextFactory.clearPassCasUrl=${cas.protocol.server.context}/clearPass

## Flag to determine if the portal should convert CAS assertion attributes to user attributes - defaults to false
#
#org.apereo.portal.security.cas.assertion.copyAttributesToUserAttributes=true

## Flag to determine if credential attribute from CAS should be decrypted to password - defaults to false
#
#org.apereo.portal.security.cas.assertion.decryptCredentialToPassword=true

## Unsigned private key in PKCS8 format for credential decryption (for decryptCredentialToPassword)
#
#org.apereo.portal.security.cas.assertion.decryptCredentialToPasswordPrivateKey=/etc/cas/private.p8

## Algorithm to use with above private key (for decryptCredentialToPassword)
#
#org.apereo.portal.security.cas.assertion.decryptCredentialToPasswordAlgorithm="RSA"

##
## Web Security Filters
##

#cors.allowed.origins=*
#cors.allowed.methods=GET,HEAD
#cors.allowed.headers=Origin,Accept,X-Requested-With,Content-Type,Access-Control-Request-Method,Access-Control-Request-Headers
#cors.exposed.headers=
#cors.support.credentials=true
#cors.preflight.maxage=1800
#cors.request.decorate=true

##
## Tomcat HTTP Security Headers
##

# antiClickJackingEnabled:  X-Frame-Options header
sec.anti.click.jacking.enabled=true
# X-Frame-Options: deny, sameorigin, allow-from
sec.anti.click.jacking.options=sameorigin
# If allow-from is selected above, add URI
sec.anti.click.jacking.uri=

# Content-Security-Policy: default-src, script-src, style-src, img-src
# See more details at: https://content-security-policy.com/
sec.content.sec.policy.enabled=false
sec.content.sec.policy=default-src 'self'

# Strict-Transport-Security: max-age=###; includeSubDomains; preload
sec.hsts.enabled=true
sec.hsts.maxage.seconds=31536000
sec.hsts.include.subdomains=true
sec.hsts.preload=false

# X-Content-Type-Options: "nosniff" will be used if enabled is set to true
sec.x.content.type.enabled=true

# Referrer-Policy available directives to pass include:
# See more details at:
sec.referrer.policy.enabled=false
sec.referrer.policy=no-referrer
