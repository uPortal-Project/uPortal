buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath "org.jasig.resourceserver:resource-server-core:${resourceServerVersion}"
    }
}

plugins {
    id 'war'
}

apply plugin: 'com.github.node-gradle.node'

description = "Apereo uPortal Webapp (WAR)"

/*
 * TODO:  Groovy-based tests (in src/test/groovy) are not currently run by the Gradle build.
 */

configurations {
    // These get packaged with the war in a special way
    webjars
}

dependencies {
    api project(':uPortal-groups:uPortal-groups-filesystem')
    api project(':uPortal-groups:uPortal-groups-grouper')
    api project(':uPortal-groups:uPortal-groups-ldap')
    api project(':uPortal-groups:uPortal-groups-local')
    api project(':uPortal-groups:uPortal-groups-smartldap')
    api project(':uPortal-index')
    api project(':uPortal-portlets')
    api project(':uPortal-security:uPortal-security-authn')
    api project(':uPortal-security:uPortal-security-xslt')
    api project(':uPortal-soffit:uPortal-soffit-connector')
    api project(':uPortal-utils:uPortal-utils-jmx')
    api project(':uPortal-utils:uPortal-utils-url')

    compileOnly "org.apereo.service.persondir:person-directory-api:${personDirectoryVersion}"
    compileOnly "${servletApiDependency}"

    testImplementation "org.apache.portals.pluto:pluto-container-api:${plutoVersion}"
    testImplementation "org.apache.portals.pluto:pluto-container-driver-api:${plutoVersion}"
    testImplementation "org.skyscreamer:jsonassert:${jsonassertVersion}"
    testImplementation "org.codehaus.groovy:groovy-test:${groovyVersion}"
    testImplementation "org.spockframework:spock-core:${spockVersion}"
    testImplementation "${portletApiDependency}"
    testImplementation "${servletApiDependency}"

    runtimeOnly "ch.qos.logback:logback-classic:${logbackVersion}"
    runtimeOnly "joda-time:joda-time-jsptags:${jodaTimeJsptagsVersion}"
    runtimeOnly "org.aspectj:aspectjweaver:${aspectjVersion}"
    runtimeOnly "org.codehaus.groovy:groovy-jsr223:${groovyVersion}"
    runtimeOnly "org.hibernate:hibernate-entitymanager:${hibernateVersion}"
    runtimeOnly "org.jasig.cas.client:cas-client-support-distributed-ehcache:${casClientVersion}"
    runtimeOnly "org.jasig.ehcache:ehcache-jgroups3replication:${ehcacheJgroups3ReplicationVersion}"
    runtimeOnly "org.jasig.portlet.utils:portlet-ws-util:${apereoPortletUtilsVersion}"
    runtimeOnly "org.slf4j:jul-to-slf4j:${slf4jVersion}"
    runtimeOnly "org.slf4j:log4j-over-slf4j:${slf4jVersion}"
    runtimeOnly "org.springframework.security:spring-security-config:${springSecurityVersion}"
    runtimeOnly "com.thoughtworks.xstream:xstream:${xstreamVersion}"

    /*
     * The HSQL driver jar should always be provided by uPortal-start;
     * that way, it has complete control over the version in the deployment.
     */
    providedRuntime "org.hsqldb:hsqldb:${hsqldbVersion}"

    webjars "org.webjars.npm:bootstrap:${bootstrapVersion}"
    webjars "org.webjars.npm:core-js-bundle:${coreJsBundleVersion}"
    webjars "org.webjars.npm:jstree:${jstreeVersion}"
    webjars "org.webjars.npm:regenerator-runtime:${regeneratorRuntimeVersion}"
    webjars "org.webjars.npm:webcomponents__webcomponentsjs:${webComponentPolyfillVersion}"
    webjars "org.webjars.npm:whatwg-fetch:${whatwgFetchPolyfillVersion}"
}

node {
    version = nodejsVersion
    download = true
}

// Support for filtering properties files
import org.apache.tools.ant.filters.ReplaceTokens
processResources {
    filter(ReplaceTokens, tokens:['projectVersion': project.version])
}

task prepareSkinResources {
    // Unpack WebJars (part of the skin)
    configurations.webjars.allDependencies.each {
        String webjarName = it.name
        String webjarVersion = it.version
        String webjarFile = configurations.webjars.files(it).getAt(0)
        // Stage 1:  Exploded WebJar
        doLast {
            copy {
                from zipTree(webjarFile)
                into "${buildDir}/webjars/${webjarName}-${webjarVersion}"
            }
        }
        // Stage 2:  Contents of the WebJar included in the skin
        doLast {
            copy {
                from "${buildDir}/webjars/${webjarName}-${webjarVersion}/META-INF/resources/webjars/${webjarName}/${webjarVersion}"
                into "${buildDir}/generated-sources/skin/main/webapp/webjars/${webjarName}"
            }
        }
    }
    // Add Respondr LESS sources
    doLast {
        copy {
            from 'src/main/webapp/media/skins/respondr'
            into "${buildDir}/generated-sources/skin/main/webapp/media/skins/respondr"
        }
    }
}

import org.jasig.resource.aggr.AggregationRequest
import org.jasig.resource.aggr.ResourcesAggregator
import org.jasig.resource.aggr.ResourcesAggregatorImpl
task aggregateRespondrSkins {
    doLast {
        final ResourcesAggregator aggr = new ResourcesAggregatorImpl();
        aggr.setDisplayJsWarnings(false);

        final File resourcesXmlFile = new File(projectDir, 'src/main/webapp/media/skins/respondr/defaultSkin/skin.xml');
        final File fullOutputDirectory = new File(buildDir, 'generated-sources/skin/main/webapp/media/skins/respondr/defaultSkin');
        final File sharedJavaScriptDirectory = new File(buildDir, 'generated-sources/skin/main/webapp/media/skins/respondr');

        // Provide the paths we evaluated in DEBUG logging
        logger.debug("resourcesXmlFile=${resourcesXmlFile}");
        logger.debug("fullOutputDirectory=${fullOutputDirectory}");
        logger.debug("sharedJavaScriptDirectory=${sharedJavaScriptDirectory}");

        final AggregationRequest aggregationRequest = new AggregationRequest();
        aggregationRequest
                .setResourcesXml(resourcesXmlFile)
                .setOutputBaseDirectory(fullOutputDirectory)
                .addAdditionalSourceDirectory(fullOutputDirectory)
                .setSharedJavaScriptDirectory(sharedJavaScriptDirectory);
        aggr.aggregate(aggregationRequest);

    }
}

// Generate CSS for Respondr skins
project.tasks.getByName('npm_run_compile-less').dependsOn(prepareSkinResources)
aggregateRespondrSkins.dependsOn('npm_run_compile-less')
processResources.dependsOn(aggregateRespondrSkins)

war {
    // Add generated CSS for Respondr skins to the war file
    with {
        from "${buildDir}/generated-sources/skin/main/webapp"
        into '/'
    }
}
